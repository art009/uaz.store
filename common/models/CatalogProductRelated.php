<?php

namespace common\models;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "catalog_product_related".
 *
 * @property int $id
 * @property int $product_id
 * @property int $related_product_id
 * @property string $created_at
 * @property string $updated_at
 *
 * @property CatalogProduct $product
 * @property CatalogProduct $relatedProduct
 */
class CatalogProductRelated extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'catalog_product_related';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['product_id', 'related_product_id'], 'integer'],
            [['created_at', 'updated_at'], 'safe']];
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'value' => date('Y-m-d H:i:s'),
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'product_id' => 'Товар',
            'related_product_id' => 'Сопутсвующий товар',
            'related_product_title' => 'Товар',
            'relatedProductTitle' => 'Сопутствующий товар',
            'productTitle' => 'Товар',
            'created_at' => 'Добавлен',
            'updated_at' => 'Отредактирован',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProduct()
    {
        return $this->hasOne(CatalogProduct::className(), ['id' => 'product_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getRelatedProduct()
    {
        return $this->hasOne(CatalogProduct::className(), ['id' => 'related_product_id']);
    }

    public function getProductTitle()
    {
        if (sizeof($this->product->categories) > 0) {
            $url = Yii::$app->params['mainDomain'] . "/catalog/product?id={$this->product->id}&categoryId={$this->product->categories[0]->id}";
            return \yii\helpers\Html::a($this->product->title, $url, ['class' => 'open-catalog', 'target' => '_blank']);
        }

        return $this->product->title;
    }

    public function getRelatedProductTitle()
    {
        if (sizeof($this->relatedProduct->categories) > 0) {
            $url = Yii::$app->params['mainDomain'] . "/catalog/product?id={$this->relatedProduct->id}&categoryId={$this->relatedProduct->categories[0]->id}";
            return \yii\helpers\Html::a($this->relatedProduct->title, $url, ['class' => 'open-catalog', 'target' => '_blank']);
        }

        return $this->relatedProduct->title;
    }

    public function saveRelated()
    {
        try {
            $relatedProducts = $this->relatedProduct->relatedProducts;
            $ids = [$this->product->id];
            foreach ($relatedProducts as $relatedProduct) {
                $ids[] = $relatedProduct->id;
            }
            $ids = array_unique($ids);
            $this->relatedProduct->setRelatedProducts($ids);
        } catch (\Exception $e) {
            //do nothing
        }
    }

    public function beforeDelete()
    {
        CatalogProductRelated::deleteAll(['related_product_id' => $this->id]);
        CatalogProductRelated::deleteAll(['product_id' => $this->id]);
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }
}
